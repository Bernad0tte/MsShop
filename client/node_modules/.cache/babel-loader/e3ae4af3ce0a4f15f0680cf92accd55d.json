{"ast":null,"code":"import { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL } from '../constants/orderConstants';\nimport axios from 'axios';\nimport { logout } from './userActions'; // export const createOrder = (order) => async (dispatch, getState) => {\n//         //getState: has token.\n//         console.log('create order before try')\n//         try {\n//           console.log('TRYYYYYY')\n//           dispatch({\n//             type: ORDER_CREATE_REQUEST,\n//           })\n//           const {userLogin: { userInfo },} = getState()\n//           const config = {\n//             headers: {\n//               'Content-Type': 'application/json',\n//               Authorization: `Bearer ${userInfo.token}`,\n//             },\n//           }\n//           console.log('DATAAAAA')\n//           const { data } = await axios.post(`/api/orders`,order, config)\n//           console.log('BEFORE SUCCESSSSSSSS')\n//           dispatch({\n//             type: ORDER_CREATE_SUCCESS,\n//             payload: data,\n//           })\n//         } catch (error) {\n//           const message =\n//             error.response && error.response.data.message\n//               ? error.response.data.message\n//               : error.message\n//           if (message === 'Not authorized, token failed') {\n//             dispatch(logout())\n//           }\n//           dispatch({\n//             type: ORDER_CREATE_FAIL,\n//             payload: message,\n//           })\n//         }\n// }\n\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Masoud/Desktop/FullStack/mern-shop/client/src/actions/orderActions.js"],"names":["ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","axios","logout","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response"],"mappings":"AAAA,SAAQA,oBAAR,EACIC,oBADJ,EAEIC,iBAFJ,QAGW,6BAHX;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAClE,MAAI;AACFD,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAIA,UAAM;AACJU,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMb,KAAK,CAACc,IAAN,CAAY,aAAZ,EAA0BX,KAA1B,EAAiCM,MAAjC,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAER,oBADC;AAEPiB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACD,GAxBD,CAwBE,OAAOC,KAAP,EAAc;AACd,UAAMC,OAAO,GACXD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OAAtC,GACID,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OADxB,GAEID,KAAK,CAACC,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cf,MAAAA,QAAQ,CAACH,MAAM,EAAP,CAAR;AACD;;AACDG,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEP,iBADC;AAEPgB,MAAAA,OAAO,EAAEI;AAFF,KAAD,CAAR;AAID;AACF,CAtCM","sourcesContent":["import {ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL\r\n    } from '../constants/orderConstants'\r\nimport axios from 'axios'\r\nimport { logout } from './userActions'\r\n\r\n// export const createOrder = (order) => async (dispatch, getState) => {\r\n//         //getState: has token.\r\n//         console.log('create order before try')\r\n//         try {\r\n//           console.log('TRYYYYYY')\r\n//           dispatch({\r\n//             type: ORDER_CREATE_REQUEST,\r\n//           })\r\n      \r\n//           const {userLogin: { userInfo },} = getState()\r\n          \r\n//           const config = {\r\n//             headers: {\r\n//               'Content-Type': 'application/json',\r\n//               Authorization: `Bearer ${userInfo.token}`,\r\n//             },\r\n//           }\r\n//           console.log('DATAAAAA')\r\n//           const { data } = await axios.post(`/api/orders`,order, config)\r\n//           console.log('BEFORE SUCCESSSSSSSS')\r\n//           dispatch({\r\n//             type: ORDER_CREATE_SUCCESS,\r\n//             payload: data,\r\n//           })\r\n//         } catch (error) {\r\n//           const message =\r\n//             error.response && error.response.data.message\r\n//               ? error.response.data.message\r\n//               : error.message\r\n//           if (message === 'Not authorized, token failed') {\r\n//             dispatch(logout())\r\n//           }\r\n//           dispatch({\r\n//             type: ORDER_CREATE_FAIL,\r\n//             payload: message,\r\n//           })\r\n//         }\r\n// }\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: ORDER_CREATE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(`/api/orders`, order, config)\r\n\r\n    dispatch({\r\n      type: ORDER_CREATE_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.removeItem('cartItems')\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: ORDER_CREATE_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}