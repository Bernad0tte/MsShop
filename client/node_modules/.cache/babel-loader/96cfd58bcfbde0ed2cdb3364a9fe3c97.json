{"ast":null,"code":"//1st file I created to work with redux.\n//Here, I connect all reducers and middlewares , ... \nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productDetailsReducer, productListReducer, productCreateReducer, productDeleteReducer, productUpdateReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userDetailsReducer, userLoginReducer, userRegisterReducer, userUpdateProfileReducer, userListReducer, userDeleteReducer, userUpdateReducer } from './reducers/userReducers';\nimport { orderCreateReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  productCreate: productCreateReducer,\n  productDelete: productDeleteReducer,\n  cart: cartReducer,\n  userList: userListReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userDelete: userDeleteReducer,\n  userUpdate: userUpdateReducer,\n  orderCreate: orderCreateReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {}; //When Store loads, we can load thing. That thing can be in initial State!\n\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Masoud/Desktop/ReactEx/FullStack/mern-shop/client/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productDetailsReducer","productListReducer","productCreateReducer","productDeleteReducer","productUpdateReducer","cartReducer","userDetailsReducer","userLoginReducer","userRegisterReducer","userUpdateProfileReducer","userListReducer","userDeleteReducer","userUpdateReducer","orderCreateReducer","reducer","productList","productDetails","productCreate","productDelete","cart","userList","userLogin","userRegister","userDetails","userUpdateProfile","userDelete","userUpdate","orderCreate","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA6D,OAA7D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAAQC,mBAAR,QAAkC,0BAAlC;AAEA,SAAQC,qBAAR,EACQC,kBADR,EAEQC,oBAFR,EAGQC,oBAHR,EAIQC,oBAJR,QAKe,4BALf;AAMA,SAAQC,WAAR,QAA0B,yBAA1B;AACA,SAAQC,kBAAR,EACSC,gBADT,EAESC,mBAFT,EAGSC,wBAHT,EAISC,eAJT,EAKSC,iBALT,EAMSC,iBANT,QASc,yBATd;AAUA,SAAQC,kBAAR,QAAiC,0BAAjC;AAEA,MAAMC,OAAO,GAAGlB,eAAe,CAAC;AAC5BmB,EAAAA,WAAW,EAAGd,kBADc;AAE5Be,EAAAA,cAAc,EAAEhB,qBAFY;AAG5BiB,EAAAA,aAAa,EAACf,oBAHc;AAI5BgB,EAAAA,aAAa,EAACf,oBAJc;AAK5BgB,EAAAA,IAAI,EAAGd,WALqB;AAM5Be,EAAAA,QAAQ,EAAEV,eANkB;AAO5BW,EAAAA,SAAS,EAAEd,gBAPiB;AAQ5Be,EAAAA,YAAY,EAAEd,mBARc;AAS5Be,EAAAA,WAAW,EAACjB,kBATgB;AAU5BkB,EAAAA,iBAAiB,EAACf,wBAVU;AAW5BgB,EAAAA,UAAU,EAACd,iBAXiB;AAY5Be,EAAAA,UAAU,EAACd,iBAZiB;AAa5Be,EAAAA,WAAW,EAAGd;AAbc,CAAD,CAA/B;AAkBA,MAAMe,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACEC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADF,GAEE,EAF/B;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACGC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADH,GAEG,IAF/B;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACJC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADI,GAEJ,EAF/B,C,CAMA;;AACA,MAAMK,YAAY,GAAG;AACjBhB,EAAAA,IAAI,EAAG;AAAEiB,IAAAA,SAAS,EAAGR,oBAAd;AAAqCS,IAAAA,eAAe,EAAEH;AAAtD,GADU;AAEjBb,EAAAA,SAAS,EAAG;AAACiB,IAAAA,QAAQ,EAAGL;AAAZ;AAFK,CAArB;AAMA,MAAMM,UAAU,GAAG,CAACzC,KAAD,CAAnB;AAEA,MAAM0C,KAAK,GAAG7C,WAAW,CAACmB,OAAD,EAAUqB,YAAV,EAAyBpC,mBAAmB,CAACF,eAAe,CAAC,GAAG0C,UAAJ,CAAhB,CAA5C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["//1st file I created to work with redux.\r\n//Here, I connect all reducers and middlewares , ... \r\n\r\nimport  {createStore, combineReducers, applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from 'redux-devtools-extension'\r\n\r\nimport {productDetailsReducer,\r\n        productListReducer,\r\n        productCreateReducer,\r\n        productDeleteReducer,\r\n        productUpdateReducer,\r\n        } from './reducers/productReducers'\r\nimport {cartReducer} from './reducers/cartReducers'\r\nimport {userDetailsReducer,\r\n         userLoginReducer, \r\n         userRegisterReducer,\r\n         userUpdateProfileReducer,\r\n         userListReducer,\r\n         userDeleteReducer,\r\n         userUpdateReducer,\r\n\r\n        }\r\n         from './reducers/userReducers'\r\nimport {orderCreateReducer} from './reducers/orderReducers'\r\n\r\nconst reducer = combineReducers({\r\n    productList : productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    productCreate:productCreateReducer,\r\n    productDelete:productDeleteReducer,\r\n    cart : cartReducer,\r\n    userList: userListReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails:userDetailsReducer,\r\n    userUpdateProfile:userUpdateProfileReducer,\r\n    userDelete:userDeleteReducer,\r\n    userUpdate:userUpdateReducer,\r\n    orderCreate : orderCreateReducer,\r\n    \r\n\r\n})\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems')\r\n                             ? JSON.parse(localStorage.getItem('cartItems')) \r\n                             : []\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo')\r\n                             ? JSON.parse(localStorage.getItem('userInfo')) \r\n                             : null\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress')\r\n                             ? JSON.parse(localStorage.getItem('shippingAddress')) \r\n                             : {}\r\n\r\n                             \r\n\r\n//When Store loads, we can load thing. That thing can be in initial State!\r\nconst initialState = {\r\n    cart : { cartItems : cartItemsFromStorage , shippingAddress: shippingAddressFromStorage},\r\n    userLogin : {userInfo : userInfoFromStorage},\r\n    \r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState , composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store\r\n"]},"metadata":{},"sourceType":"module"}