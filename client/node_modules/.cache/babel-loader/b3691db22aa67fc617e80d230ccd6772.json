{"ast":null,"code":"// import {\n//     USER_LOGIN_REQUEST,\n//     USER_LOGIN_SUCCESS,\n//     USER_LOGIN_FAIL,\n//     USER_LOGOUT,\n//     USER_REGISTER_REQUEST,\n//     USER_REGISTER_SUCCESS,\n//     USER_REGISTER_FAIL,\n//     USER_DETAILS_SUCCESS,\n//     USER_DETAILS_REQUEST,\n//     USER_DETAILS_FAIL,\n//     USER_UPDATE_PROFILE_REQUEST,\n//     USER_UPDATE_PROFILE_SUCCESS,\n//     USER_UPDATE_PROFILE_FAIL,\n//     USER_UPDATE_PROFILE_RESET,\n//     USER_LIST_REQUEST,\n//     USER_LIST_SUCCESS,\n//     USER_LIST_FAIL,\n//     USER_LIST_RESET,\n//     USER_DELETE_FAIL,\n//     USER_DELETE_SUCCESS,\n//     USER_DELETE_REQUEST,\n//     USER_UPDATE_REQUEST,\n//     USER_UPDATE_SUCCESS,\n//     USER_UPDATE_FAIL,\n//     USER_UPDATE_RESET,\n// }from '../constants/userConstants'\n// import axios from 'axios'\n// export const login = (email,password) => async(dispatch)=>{\n//     try{\n//         dispatch({type: USER_LOGIN_REQUEST})\n//         const config = {\n//             headers:{\n//                 'Content_Type':'application/json'\n//             }    \n//         }\n//         const { data } = await axios.post(\n//             '/api/users/login',\n//             { email, password },\n//             config\n//           )\n//         dispatch({\n//             type: USER_LOGIN_SUCCESS,\n//             payload:data\n//         })\n//         localStorage.setItem('userInfo',JSON.stringify(data))\n//     }catch(error){\n//         dispatch({\n//             type: USER_LOGIN_FAIL,\n//             payload:error.response && error.response.data.message ? error.response.data.message : error.message\n//         })\n//     }\n// }\n// export const logout = () => async(dispatch)=>{\n//     localStorage.removeItem('userInfo')\n//     dispatch({type : USER_LOGOUT})\n//     dispatch({type: USER_LIST_RESET})\n// }\n// export const register = (name,email,password)=> async(dispatch) => {\n//     try{\n//         dispatch({type: USER_REGISTER_REQUEST})\n//         const config = {\n//             headers:{\n//                 'Content_Type':'application/json'\n//             }    \n//         }\n//         const { data } = await axios.post(\n//             '/api/users',\n//             { name,email, password },\n//             config\n//           )\n//         dispatch({\n//             type: USER_REGISTER_SUCCESS,\n//             payload:data\n//         })\n//         //Right after successfully registration, login user.\n//         dispatch({\n//             type: USER_LOGIN_SUCCESS,\n//             payload:data\n//         })\n//         localStorage.setItem('userInfo',JSON.stringify(data))\n//     }catch(error){\n//         dispatch({\n//             type: USER_REGISTER_FAIL,\n//             payload:error.response && error.response.data.message ? error.response.data.message : error.message\n//         })\n//     }\n// }\n// export const getUserDetails = (id) => async (dispatch, getState) => {\n//     //getState: has token.\n//     try {\n//       dispatch({\n//         type: USER_DETAILS_REQUEST,\n//       })\n//       const {userLogin: { userInfo },} = getState()\n//       const config = {\n//         headers: {\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       }\n//       const { data } = await axios.get(`/api/users/${id}`, config)\n//       dispatch({\n//         type: USER_DETAILS_SUCCESS,\n//         payload: data,\n//       })\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       if (message === 'Not authorized, token failed') {\n//         dispatch(logout())\n//       }\n//       dispatch({\n//         type: USER_DETAILS_FAIL,\n//         payload: message,\n//       })\n//     }\n//   }\n// export const updateUserProfile = (user) => async (dispatch, getState) => {\n//     //getState: has token.\n//     try {\n//       dispatch({\n//         type: USER_UPDATE_PROFILE_REQUEST,\n//       })\n//       const {userLogin: { userInfo },} = getState()\n//       const config = {\n//         headers: {\n//           'Content_Type':'application/json',\n//           Authorization: `Bearer ${userInfo.token}`,\n//         },\n//       }\n//       const { data } = await axios.put('/api/users/profile',user, config)\n//       dispatch({\n//         type: USER_UPDATE_PROFILE_SUCCESS,\n//         payload: data,\n//       })\n//     } catch (error) {\n//       const message =\n//         error.response && error.response.data.message\n//           ? error.response.data.message\n//           : error.message\n//       if (message === 'Not authorized, token failed') {\n//         dispatch(logout())\n//       }\n//       dispatch({\n//         type: USER_UPDATE_PROFILE_FAIL,\n//         payload: message,\n//       })\n//     }\n//   }\n// //Protected for admin\n// export const listUsers = () => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_LIST_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.get(`/api/users`, config)\n//     dispatch({\n//       type: USER_LIST_SUCCESS,\n//       payload: data,\n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_LIST_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const deleteUser = (id) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_DELETE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     await axios.delete(`/api/users/${id}`, config)\n//     dispatch({\n//       type: USER_DELETE_SUCCESS \n//     })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_DELETE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\n// export const updateUser = (user) => async (dispatch, getState) => {\n//   try {\n//     dispatch({\n//       type: USER_UPDATE_REQUEST,\n//     })\n//     const {\n//       userLogin: { userInfo },\n//     } = getState()\n//     const config = {\n//       headers: {\n//         'Content-Type': 'application/json',\n//         Authorization: `Bearer ${userInfo.token}`,\n//       },\n//     }\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, config)\n//     dispatch({ type: USER_UPDATE_SUCCESS })\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\n//   } catch (error) {\n//     const message =\n//       error.response && error.response.data.message\n//         ? error.response.data.message\n//         : error.message\n//     if (message === 'Not authorized, token failed') {\n//       dispatch(logout())\n//     }\n//     dispatch({\n//       type: USER_UPDATE_FAIL,\n//       payload: message,\n//     })\n//   }\n// }\nimport axios from 'axios';\nimport { USER_DETAILS_FAIL, USER_DETAILS_REQUEST, USER_DETAILS_SUCCESS, USER_LOGIN_FAIL, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS, USER_UPDATE_PROFILE_FAIL, USER_UPDATE_PROFILE_REQUEST, USER_UPDATE_PROFILE_SUCCESS, USER_LIST_FAIL, USER_LIST_SUCCESS, USER_LIST_REQUEST, USER_LIST_RESET, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL, USER_UPDATE_FAIL, USER_UPDATE_SUCCESS, USER_UPDATE_REQUEST } from '../constants/userConstants';\nexport const login = (email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_LOGIN_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users/login', {\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem('userInfo');\n  localStorage.removeItem('cartItems');\n  localStorage.removeItem('shippingAddress');\n  localStorage.removeItem('paymentMethod');\n  dispatch({\n    type: USER_LOGOUT\n  });\n  dispatch({\n    type: USER_LIST_RESET\n  });\n  document.location.href = '/login';\n};\nexport const register = (name, email, password) => async dispatch => {\n  try {\n    dispatch({\n      type: USER_REGISTER_REQUEST\n    });\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post('/api/users', {\n      name,\n      email,\n      password\n    }, config);\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const getUserDetails = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUserProfile = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_PROFILE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/profile`, user, config);\n    dispatch({\n      type: USER_UPDATE_PROFILE_SUCCESS,\n      payload: data\n    });\n    dispatch({\n      type: USER_LOGIN_SUCCESS,\n      payload: data\n    });\n    localStorage.setItem('userInfo', JSON.stringify(data));\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_PROFILE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const listUsers = () => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.get(`/api/users`, config);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: message\n    });\n  }\n};\nexport const deleteUser = id => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    await axios.delete(`/api/users/${id}`, config);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const updateUser = user => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: USER_UPDATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.put(`/api/users/${user._id}`, user, config);\n    dispatch({\n      type: USER_UPDATE_SUCCESS\n    });\n    dispatch({\n      type: USER_DETAILS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n\n    if (message === 'Not authorized, token failed') {\n      dispatch(logout());\n    }\n\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Masoud/Desktop/ReactEx/FullStack/mern-shop/client/src/actions/userActions.js"],"names":["axios","USER_DETAILS_FAIL","USER_DETAILS_REQUEST","USER_DETAILS_SUCCESS","USER_LOGIN_FAIL","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_PROFILE_FAIL","USER_UPDATE_PROFILE_REQUEST","USER_UPDATE_PROFILE_SUCCESS","USER_LIST_FAIL","USER_LIST_SUCCESS","USER_LIST_REQUEST","USER_LIST_RESET","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","USER_UPDATE_FAIL","USER_UPDATE_SUCCESS","USER_UPDATE_REQUEST","login","email","password","dispatch","type","config","headers","data","post","payload","localStorage","setItem","JSON","stringify","error","response","message","logout","removeItem","document","location","href","register","name","getUserDetails","id","getState","userLogin","userInfo","Authorization","token","get","updateUserProfile","user","put","listUsers","deleteUser","delete","updateUser","_id"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,oBAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,kBARF,EASEC,qBATF,EAUEC,qBAVF,EAWEC,wBAXF,EAYEC,2BAZF,EAaEC,2BAbF,EAcEC,cAdF,EAeEC,iBAfF,EAgBEC,iBAhBF,EAiBEC,eAjBF,EAkBEC,mBAlBF,EAmBEC,mBAnBF,EAoBEC,gBApBF,EAqBEC,gBArBF,EAsBEC,mBAtBF,EAuBEC,mBAvBF,QAwBO,4BAxBP;AA2BA,OAAO,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEvB;AADC,KAAD,CAAR;AAIA,UAAMwB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAACgC,IAAN,CACrB,kBADqB,EAErB;AAAEP,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAFqB,EAGrBG,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEtB,kBADC;AAEP2B,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GAvBD,CAuBE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAExB,eADC;AAEP6B,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAjCM;AAmCP,OAAO,MAAMC,MAAM,GAAG,MAAOd,QAAD,IAAc;AACxCO,EAAAA,YAAY,CAACQ,UAAb,CAAwB,UAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,WAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,iBAAxB;AACAR,EAAAA,YAAY,CAACQ,UAAb,CAAwB,eAAxB;AACAf,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAErB;AAAR,GAAD,CAAR;AACAoB,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACA0B,EAAAA,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,GAAyB,QAAzB;AACD,CARM;AAUP,OAAO,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOtB,KAAP,EAAcC,QAAd,KAA2B,MAAOC,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEnB;AADC,KAAD,CAAR;AAIA,UAAMoB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAACgC,IAAN,CACrB,YADqB,EAErB;AAAEe,MAAAA,IAAF;AAAQtB,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAFqB,EAGrBG,MAHqB,CAAvB;AAMAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAElB,qBADC;AAEPuB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEtB,kBADC;AAEP2B,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GA5BD,CA4BE,OAAOO,KAAP,EAAc;AACdX,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEpB,kBADC;AAEPyB,MAAAA,OAAO,EACLK,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE;AALL,KAAD,CAAR;AAOD;AACF,CAtCM;AAwCP,OAAO,MAAMQ,cAAc,GAAIC,EAAD,IAAQ,OAAOtB,QAAP,EAAiBuB,QAAjB,KAA8B;AAClE,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE1B;AADC,KAAD,CAAR;AAIA,UAAM;AACJiD,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMrB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACPuB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AADjC;AADI,KAAf;AAMA,UAAM;AAAEvB,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAACuD,GAAN,CAAW,cAAaN,EAAG,EAA3B,EAA8BpB,MAA9B,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEzB,oBADC;AAEP8B,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GArBD,CAqBE,OAAOO,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cb,MAAAA,QAAQ,CAACc,MAAM,EAAP,CAAR;AACD;;AACDd,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAE3B,iBADC;AAEPgC,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAnCM;AAqCP,OAAO,MAAMgB,iBAAiB,GAAIC,IAAD,IAAU,OAAO9B,QAAP,EAAiBuB,QAAjB,KAA8B;AACvE,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAIA,UAAM;AACJuC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMrB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPuB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAEvB,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAAC0D,GAAN,CAAW,oBAAX,EAAgCD,IAAhC,EAAsC5B,MAAtC,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEf,2BADC;AAEPoB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAJ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEtB,kBADC;AAEP2B,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAIAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAjC;AACD,GA3BD,CA2BE,OAAOO,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cb,MAAAA,QAAQ,CAACc,MAAM,EAAP,CAAR;AACD;;AACDd,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEjB,wBADC;AAEPsB,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAzCM;AA2CP,OAAO,MAAMmB,SAAS,GAAG,MAAM,OAAOhC,QAAP,EAAiBuB,QAAjB,KAA8B;AAC3D,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEZ;AADC,KAAD,CAAR;AAIA,UAAM;AACJmC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMrB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACPuB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AADjC;AADI,KAAf;AAMA,UAAM;AAAEvB,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAACuD,GAAN,CAAW,YAAX,EAAwB1B,MAAxB,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEb,iBADC;AAEPkB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAID,GArBD,CAqBE,OAAOO,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cb,MAAAA,QAAQ,CAACc,MAAM,EAAP,CAAR;AACD;;AACDd,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEd,cADC;AAEPmB,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAnCM;AAqCP,OAAO,MAAMoB,UAAU,GAAIX,EAAD,IAAQ,OAAOtB,QAAP,EAAiBuB,QAAjB,KAA8B;AAC9D,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEV;AADC,KAAD,CAAR;AAIA,UAAM;AACJiC,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMrB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACPuB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AADjC;AADI,KAAf;AAMA,UAAMtD,KAAK,CAAC6D,MAAN,CAAc,cAAaZ,EAAG,EAA9B,EAAiCpB,MAAjC,CAAN;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET;AAAR,KAAD,CAAR;AACD,GAlBD,CAkBE,OAAOmB,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cb,MAAAA,QAAQ,CAACc,MAAM,EAAP,CAAR;AACD;;AACDd,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER,gBADC;AAEPa,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CAhCM;AAkCP,OAAO,MAAMsB,UAAU,GAAIL,IAAD,IAAU,OAAO9B,QAAP,EAAiBuB,QAAjB,KAA8B;AAChE,MAAI;AACFvB,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL;AADC,KAAD,CAAR;AAIA,UAAM;AACJ4B,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADP,QAEFF,QAAQ,EAFZ;AAIA,UAAMrB,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPuB,QAAAA,aAAa,EAAG,UAASD,QAAQ,CAACE,KAAM;AAFjC;AADI,KAAf;AAOA,UAAM;AAAEvB,MAAAA;AAAF,QAAW,MAAM/B,KAAK,CAAC0D,GAAN,CAAW,cAAaD,IAAI,CAACM,GAAI,EAAjC,EAAoCN,IAApC,EAA0C5B,MAA1C,CAAvB;AAEAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN;AAAR,KAAD,CAAR;AAEAK,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEzB,oBAAR;AAA8B8B,MAAAA,OAAO,EAAEF;AAAvC,KAAD,CAAR;AAED,GAtBD,CAsBE,OAAOO,KAAP,EAAc;AACd,UAAME,OAAO,GACXF,KAAK,CAACC,QAAN,IAAkBD,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OAAtC,GACIF,KAAK,CAACC,QAAN,CAAeR,IAAf,CAAoBS,OADxB,GAEIF,KAAK,CAACE,OAHZ;;AAIA,QAAIA,OAAO,KAAK,8BAAhB,EAAgD;AAC9Cb,MAAAA,QAAQ,CAACc,MAAM,EAAP,CAAR;AACD;;AACDd,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,gBADC;AAEPY,MAAAA,OAAO,EAAEO;AAFF,KAAD,CAAR;AAID;AACF,CApCM","sourcesContent":["// import {\r\n//     USER_LOGIN_REQUEST,\r\n//     USER_LOGIN_SUCCESS,\r\n//     USER_LOGIN_FAIL,\r\n//     USER_LOGOUT,\r\n//     USER_REGISTER_REQUEST,\r\n//     USER_REGISTER_SUCCESS,\r\n//     USER_REGISTER_FAIL,\r\n//     USER_DETAILS_SUCCESS,\r\n//     USER_DETAILS_REQUEST,\r\n//     USER_DETAILS_FAIL,\r\n//     USER_UPDATE_PROFILE_REQUEST,\r\n//     USER_UPDATE_PROFILE_SUCCESS,\r\n//     USER_UPDATE_PROFILE_FAIL,\r\n//     USER_UPDATE_PROFILE_RESET,\r\n//     USER_LIST_REQUEST,\r\n//     USER_LIST_SUCCESS,\r\n//     USER_LIST_FAIL,\r\n//     USER_LIST_RESET,\r\n//     USER_DELETE_FAIL,\r\n//     USER_DELETE_SUCCESS,\r\n//     USER_DELETE_REQUEST,\r\n//     USER_UPDATE_REQUEST,\r\n//     USER_UPDATE_SUCCESS,\r\n//     USER_UPDATE_FAIL,\r\n//     USER_UPDATE_RESET,\r\n\r\n\r\n// }from '../constants/userConstants'\r\n// import axios from 'axios'\r\n\r\n// export const login = (email,password) => async(dispatch)=>{\r\n//     try{\r\n//         dispatch({type: USER_LOGIN_REQUEST})\r\n\r\n//         const config = {\r\n//             headers:{\r\n//                 'Content_Type':'application/json'\r\n//             }    \r\n//         }\r\n        \r\n//         const { data } = await axios.post(\r\n//             '/api/users/login',\r\n//             { email, password },\r\n//             config\r\n//           )\r\n    \r\n//         dispatch({\r\n//             type: USER_LOGIN_SUCCESS,\r\n//             payload:data\r\n//         })\r\n\r\n//         localStorage.setItem('userInfo',JSON.stringify(data))\r\n\r\n//     }catch(error){\r\n        \r\n//         dispatch({\r\n//             type: USER_LOGIN_FAIL,\r\n//             payload:error.response && error.response.data.message ? error.response.data.message : error.message\r\n//         })\r\n//     }\r\n\r\n// }\r\n\r\n// export const logout = () => async(dispatch)=>{\r\n//     localStorage.removeItem('userInfo')\r\n//     dispatch({type : USER_LOGOUT})\r\n//     dispatch({type: USER_LIST_RESET})\r\n// }\r\n\r\n\r\n\r\n// export const register = (name,email,password)=> async(dispatch) => {\r\n//     try{\r\n//         dispatch({type: USER_REGISTER_REQUEST})\r\n\r\n//         const config = {\r\n//             headers:{\r\n//                 'Content_Type':'application/json'\r\n//             }    \r\n//         }\r\n        \r\n//         const { data } = await axios.post(\r\n//             '/api/users',\r\n//             { name,email, password },\r\n//             config\r\n//           )\r\n    \r\n//         dispatch({\r\n//             type: USER_REGISTER_SUCCESS,\r\n//             payload:data\r\n//         })\r\n\r\n//         //Right after successfully registration, login user.\r\n//         dispatch({\r\n//             type: USER_LOGIN_SUCCESS,\r\n//             payload:data\r\n//         })\r\n\r\n//         localStorage.setItem('userInfo',JSON.stringify(data))\r\n\r\n//     }catch(error){\r\n        \r\n//         dispatch({\r\n//             type: USER_REGISTER_FAIL,\r\n//             payload:error.response && error.response.data.message ? error.response.data.message : error.message\r\n//         })\r\n//     }\r\n// }\r\n\r\n\r\n// export const getUserDetails = (id) => async (dispatch, getState) => {\r\n//     //getState: has token.\r\n//     try {\r\n//       dispatch({\r\n//         type: USER_DETAILS_REQUEST,\r\n//       })\r\n  \r\n//       const {userLogin: { userInfo },} = getState()\r\n  \r\n//       const config = {\r\n//         headers: {\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       }\r\n  \r\n//       const { data } = await axios.get(`/api/users/${id}`, config)\r\n  \r\n//       dispatch({\r\n//         type: USER_DETAILS_SUCCESS,\r\n//         payload: data,\r\n//       })\r\n//     } catch (error) {\r\n//       const message =\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       if (message === 'Not authorized, token failed') {\r\n//         dispatch(logout())\r\n//       }\r\n//       dispatch({\r\n//         type: USER_DETAILS_FAIL,\r\n//         payload: message,\r\n//       })\r\n//     }\r\n//   }\r\n\r\n// export const updateUserProfile = (user) => async (dispatch, getState) => {\r\n//     //getState: has token.\r\n//     try {\r\n//       dispatch({\r\n//         type: USER_UPDATE_PROFILE_REQUEST,\r\n//       })\r\n  \r\n//       const {userLogin: { userInfo },} = getState()\r\n  \r\n//       const config = {\r\n//         headers: {\r\n//           'Content_Type':'application/json',\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       }\r\n  \r\n//       const { data } = await axios.put('/api/users/profile',user, config)\r\n  \r\n//       dispatch({\r\n//         type: USER_UPDATE_PROFILE_SUCCESS,\r\n//         payload: data,\r\n//       })\r\n//     } catch (error) {\r\n//       const message =\r\n//         error.response && error.response.data.message\r\n//           ? error.response.data.message\r\n//           : error.message\r\n//       if (message === 'Not authorized, token failed') {\r\n//         dispatch(logout())\r\n//       }\r\n//       dispatch({\r\n//         type: USER_UPDATE_PROFILE_FAIL,\r\n//         payload: message,\r\n//       })\r\n//     }\r\n//   }\r\n\r\n// //Protected for admin\r\n// export const listUsers = () => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: USER_LIST_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.get(`/api/users`, config)\r\n\r\n//     dispatch({\r\n//       type: USER_LIST_SUCCESS,\r\n//       payload: data,\r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: USER_LIST_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n// export const deleteUser = (id) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: USER_DELETE_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     await axios.delete(`/api/users/${id}`, config)\r\n\r\n//     dispatch({\r\n//       type: USER_DELETE_SUCCESS \r\n//     })\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: USER_DELETE_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n\r\n// export const updateUser = (user) => async (dispatch, getState) => {\r\n//   try {\r\n//     dispatch({\r\n//       type: USER_UPDATE_REQUEST,\r\n//     })\r\n\r\n//     const {\r\n//       userLogin: { userInfo },\r\n//     } = getState()\r\n\r\n//     const config = {\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     }\r\n\r\n//     const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n//     dispatch({ type: USER_UPDATE_SUCCESS })\r\n\r\n//     dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n\r\n    \r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message\r\n//     if (message === 'Not authorized, token failed') {\r\n//       dispatch(logout())\r\n//     }\r\n//     dispatch({\r\n//       type: USER_UPDATE_FAIL,\r\n//       payload: message,\r\n//     })\r\n//   }\r\n// }\r\n\r\n\r\nimport axios from 'axios'\r\nimport {\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_LOGIN_FAIL,\r\n  USER_LOGIN_REQUEST,\r\n  USER_LOGIN_SUCCESS,\r\n  USER_LOGOUT,\r\n  USER_REGISTER_FAIL,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_RESET,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n} from '../constants/userConstants'\r\n\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LOGIN_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users/login',\r\n      { email, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem('userInfo')\r\n  localStorage.removeItem('cartItems')\r\n  localStorage.removeItem('shippingAddress')\r\n  localStorage.removeItem('paymentMethod')\r\n  dispatch({ type: USER_LOGOUT })\r\n  dispatch({ type: USER_LIST_RESET })\r\n  document.location.href = '/login'\r\n}\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_REGISTER_REQUEST,\r\n    })\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.post(\r\n      '/api/users',\r\n      { name, email, password },\r\n      config\r\n    )\r\n\r\n    dispatch({\r\n      type: USER_REGISTER_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DETAILS_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/users/${id}`, config)\r\n\r\n    dispatch({\r\n      type: USER_DETAILS_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: USER_DETAILS_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/users/profile`, user, config)\r\n\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_SUCCESS,\r\n      payload: data,\r\n    })\r\n    dispatch({\r\n      type: USER_LOGIN_SUCCESS,\r\n      payload: data,\r\n    })\r\n    localStorage.setItem('userInfo', JSON.stringify(data))\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: USER_UPDATE_PROFILE_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_LIST_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.get(`/api/users`, config)\r\n\r\n    dispatch({\r\n      type: USER_LIST_SUCCESS,\r\n      payload: data,\r\n    })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: USER_LIST_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_DELETE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    await axios.delete(`/api/users/${id}`, config)\r\n\r\n    dispatch({ type: USER_DELETE_SUCCESS })\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: USER_DELETE_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: USER_UPDATE_REQUEST,\r\n    })\r\n\r\n    const {\r\n      userLogin: { userInfo },\r\n    } = getState()\r\n\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    }\r\n\r\n    const { data } = await axios.put(`/api/users/${user._id}`, user, config)\r\n\r\n    dispatch({ type: USER_UPDATE_SUCCESS })\r\n\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data })\r\n\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message\r\n    if (message === 'Not authorized, token failed') {\r\n      dispatch(logout())\r\n    }\r\n    dispatch({\r\n      type: USER_UPDATE_FAIL,\r\n      payload: message,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}